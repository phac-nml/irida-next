"""
Autogenerated input type of AttachFilesToSample
"""
input AttachFilesToSampleInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  A list of files (signedBlobId) to attach to the sample
  """
  files: [String!]!

  """
  The Node ID of the sample to be updated.
  """
  sampleId: ID!
}

"""
Autogenerated return type of AttachFilesToSample.
"""
type AttachFilesToSamplePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Errors that prevented the mutation.
  """
  errors: JSON!

  """
  The updated sample.
  """
  sample: Sample!

  """
  The status of the mutation.
  """
  status: JSON!
}

"""
An attachment
"""
type Attachment implements Node {
  """
  Attachment download url
  """
  attachmentUrl: String!

  """
  Attachment file size
  """
  byteSize: Int!

  """
  Attachment creation date
  """
  createdAt: String!

  """
  Attachment file name
  """
  filename: String!

  """
  ID of the object.
  """
  id: ID!

  """
  Metadata for the attachment
  """
  metadata(
    """
    Optional array of keys to limit metadata result to.
    """
    keys: [String!] = null
  ): JSON!
}

"""
The connection type for Attachment.
"""
type AttachmentConnection {
  """
  A list of edges.
  """
  edges: [AttachmentEdge]

  """
  A list of nodes.
  """
  nodes: [Attachment]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type AttachmentEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: Attachment
}

"""
Autogenerated input type of CreateDirectUpload
"""
input CreateDirectUploadInput {
  """
  File size (bytes)
  """
  byteSize: Int!

  """
  MD5 file checksum as base64
  """
  checksum: String!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  File content type
  """
  contentType: String!

  """
  Original file name
  """
  filename: String!
}

"""
Autogenerated return type of CreateDirectUpload.
"""
type CreateDirectUploadPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Represents direct upload credentials
  """
  directUpload: DirectUpload!
}

"""
Autogenerated input type of CreateSample
"""
input CreateSampleInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The description to give the sample.
  """
  description: String!

  """
  The name to give the sample.
  """
  name: String!

  """
  The Node ID of the project to switch the sample will be created in.
  """
  projectId: ID!
}

"""
Autogenerated return type of CreateSample.
"""
type CreateSamplePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  A list of errors that prevented the mutation.
  """
  errors: [String!]!

  """
  The newly created sample.
  """
  sample: Sample
}

"""
Represents direct upload credentials
"""
type DirectUpload {
  """
  Created blob record ID
  """
  blobId: ID!

  """
  HTTP request headers (JSON-encoded)
  """
  headers: String!

  """
  Created blob record signed ID
  """
  signedBlobId: ID!

  """
  Upload URL
  """
  url: String!
}

"""
A group
"""
type Group implements Node {
  """
  List of descendant groups of this group.
  """
  descendantGroups(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    List of descendant groups of the parent group.
    """
    includeParentDescendants: Boolean = true

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): GroupConnection

  """
  Description of the namespace.
  """
  description: String

  """
  Full name of the namespace.
  """
  fullName: String!

  """
  Full path of the namespace.
  """
  fullPath: ID!

  """
  ID of the object.
  """
  id: ID!

  """
  Name of the namespace.
  """
  name: String!

  """
  Parent group.
  """
  parent: Group

  """
  Path of the namespace.
  """
  path: String!

  """
  Projects within this namespace
  """
  projects(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Include projects from subgroups.
    """
    includeSubGroups: Boolean = false

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ProjectConnection
}

"""
The connection type for Group.
"""
type GroupConnection {
  """
  A list of edges.
  """
  edges: [GroupEdge]

  """
  A list of nodes.
  """
  nodes: [Group]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type GroupEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: Group
}

"""
Represents untyped JSON
"""
scalar JSON

"""
The mutation root of this schema
"""
type Mutation {
  """
  Attaches files to sample.
  """
  attachFilesToSample(
    """
    Parameters for AttachFilesToSample
    """
    input: AttachFilesToSampleInput!
  ): AttachFilesToSamplePayload

  """
  Create blob to upload data to.
  """
  createDirectUpload(
    """
    Parameters for CreateDirectUpload
    """
    input: CreateDirectUploadInput!
  ): CreateDirectUploadPayload

  """
  Create a new sample within an existing project.
  """
  createSample(
    """
    Parameters for CreateSample
    """
    input: CreateSampleInput!
  ): CreateSamplePayload

  """
  Update metadata for a sample.
  """
  updateSampleMetadata(
    """
    Parameters for UpdateSampleMetadata
    """
    input: UpdateSampleMetadataInput!
  ): UpdateSampleMetadataPayload
}

"""
A namespace
"""
type Namespace implements Node {
  """
  Description of the namespace.
  """
  description: String

  """
  Full name of the namespace.
  """
  fullName: String!

  """
  Full path of the namespace.
  """
  fullPath: ID!

  """
  ID of the object.
  """
  id: ID!

  """
  Name of the namespace.
  """
  name: String!

  """
  Path of the namespace.
  """
  path: String!

  """
  Projects within this namespace
  """
  projects(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Include projects from subgroups.
    """
    includeSubGroups: Boolean = false

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ProjectConnection
}

"""
An object with an ID.
"""
interface Node {
  """
  ID of the object.
  """
  id: ID!
}

"""
Information about pagination in a connection.
"""
type PageInfo {
  """
  When paginating forwards, the cursor to continue.
  """
  endCursor: String

  """
  When paginating forwards, are there more items?
  """
  hasNextPage: Boolean!

  """
  When paginating backwards, are there more items?
  """
  hasPreviousPage: Boolean!

  """
  When paginating backwards, the cursor to continue.
  """
  startCursor: String
}

"""
A project
"""
type Project implements Node {
  """
  Description of the project.
  """
  description: String

  """
  Full name of the project.
  """
  fullName: String!

  """
  Full path of the project.
  """
  fullPath: ID!

  """
  ID of the object.
  """
  id: ID!

  """
  Name of the project.
  """
  name: String!

  """
  Parent namespace
  """
  parent: Namespace!

  """
  Path of the project.
  """
  path: String!

  """
  Samples on the project
  """
  samples(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): SampleConnection
}

"""
The connection type for Project.
"""
type ProjectConnection {
  """
  A list of edges.
  """
  edges: [ProjectEdge]

  """
  A list of nodes.
  """
  nodes: [Project]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type ProjectEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: Project
}

"""
The query root of this schema
"""
type Query {
  """
  Get information about current user.
  """
  currentUser: User

  """
  Find a group.
  """
  group(
    """
    Full path of the group. For example, `pathogen/surveillance`.
    """
    fullPath: ID!
  ): Group

  """
  Find groups.
  """
  groups(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): GroupConnection!

  """
  Find a namespace.
  """
  namespace(
    """
    Full path of the namespace. For example, `pathogen/surveillance`.
    """
    fullPath: ID!
  ): Namespace

  """
  Fetches an object given its ID.
  """
  node(
    """
    ID of the object.
    """
    id: ID!
  ): Node

  """
  Fetches a list of objects given a list of IDs.
  """
  nodes(
    """
    IDs of the objects.
    """
    ids: [ID!]!
  ): [Node]!

  """
  Find a project.
  """
  project(
    """
    Full path of the project. For example, `pathogen/surveillance/2023`.
    """
    fullPath: ID!
  ): Project

  """
  Find projects.
  """
  projects(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ProjectConnection

  """
  Find samples.
  """
  samples(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Optional group identifier to return list of samples for.
    """
    groupId: ID = null

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): SampleConnection
}

"""
A sample
"""
type Sample implements Node {
  """
  Attachments on the sample
  """
  attachments(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): AttachmentConnection

  """
  Description of the sample.
  """
  description: String

  """
  ID of the object.
  """
  id: ID!

  """
  Metadata for the sample
  """
  metadata(
    """
    Optional array of keys to limit metadata result to.
    """
    keys: [String!] = null
  ): JSON!

  """
  Name of the sample.
  """
  name: String!

  """
  Project the sample is on.
  """
  project: Project!
}

"""
The connection type for Sample.
"""
type SampleConnection {
  """
  A list of edges.
  """
  edges: [SampleEdge]

  """
  A list of nodes.
  """
  nodes: [Sample]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type SampleEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: Sample
}

"""
Autogenerated input type of UpdateSampleMetadata
"""
input UpdateSampleMetadataInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The metadata to update the sample with.
  """
  metadata: JSON!

  """
  The Node ID of the sample to be updated.
  """
  sampleId: ID!
}

"""
Autogenerated return type of UpdateSampleMetadata.
"""
type UpdateSampleMetadataPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  A list of errors that prevented the mutation.
  """
  errors: [String!]!

  """
  The updated sample.
  """
  sample: Sample!

  """
  The status of the mutation.
  """
  status: JSON!
}

"""
A user
"""
type User {
  """
  User email.
  """
  email: String!

  """
  ID of the user.
  """
  id: ID!
}
