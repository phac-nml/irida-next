"""
Autogenerated input type of AttachFilesToGroup
"""
input AttachFilesToGroupInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  A list of files (signedBlobId) to attach to the group
  """
  files: [String!]!

  """
  The Node ID of the group to be updated. For example, `gid://irida/group/a84cd757-dedb-4c64-8b01-097020163077`
  """
  groupId: ID

  """
  Persistent Unique Identifier of the group. For example, `INXT_PRJ_AAAAAAAAAA`.
  """
  groupPuid: ID
}

"""
Autogenerated return type of AttachFilesToGroup.
"""
type AttachFilesToGroupPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  A list of errors that prevented the mutation.
  """
  errors: [UserError!]!

  """
  The updated group.
  """
  group: Group

  """
  The status of the mutation.
  """
  status: JSON
}

"""
Autogenerated input type of AttachFilesToProject
"""
input AttachFilesToProjectInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  A list of files (signedBlobId) to attach to the project
  """
  files: [String!]!

  """
  The Node ID of the project to be updated. For example, `gid://irida/project/a84cd757-dedb-4c64-8b01-097020163077`
  """
  projectId: ID

  """
  Persistent Unique Identifier of the project. For example, `INXT_PRJ_AAAAAAAAAA`.
  """
  projectPuid: ID
}

"""
Autogenerated return type of AttachFilesToProject.
"""
type AttachFilesToProjectPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  A list of errors that prevented the mutation.
  """
  errors: [UserError!]!

  """
  The updated project.
  """
  project: Project

  """
  The status of the mutation.
  """
  status: JSON
}

"""
Autogenerated input type of AttachFilesToSample
"""
input AttachFilesToSampleInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  A list of files (signedBlobId) to attach to the sample
  """
  files: [String!]!

  """
  The Node ID of the sample to be updated. For example, `gid://irida/Sample/a84cd757-dedb-4c64-8b01-097020163077`
  """
  sampleId: ID

  """
  Persistent Unique Identifier of the sample. For example, `INXT_SAM_AAAAAAAAAA`.
  """
  samplePuid: ID
}

"""
Autogenerated return type of AttachFilesToSample.
"""
type AttachFilesToSamplePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  A list of errors that prevented the mutation.
  """
  errors: [UserError!]!

  """
  The updated sample.
  """
  sample: Sample

  """
  The status of the mutation.
  """
  status: JSON
}

"""
An attachment
"""
type Attachment implements Node {
  """
  Attachment download url
  """
  attachmentUrl: String!

  """
  Attachment file size
  """
  byteSize: Int!

  """
  Datetime of creation.
  """
  createdAt: ISO8601DateTime!

  """
  Attachment file name
  """
  filename: String!

  """
  ID of the object.
  """
  id: ID!

  """
  Metadata for the attachment
  """
  metadata(
    """
    Optional array of keys to limit metadata result to.
    """
    keys: [String!] = null
  ): JSON!

  """
  Persistent Unique Identifier of the attachment. For example, `INXT_ATT_AAAAAAAAAAAA`.
  """
  puid: ID!

  """
  Datetime of last update.
  """
  updatedAt: ISO8601DateTime!
}

"""
The connection type for Attachment.
"""
type AttachmentConnection {
  """
  A list of edges.
  """
  edges: [AttachmentEdge]

  """
  A list of nodes.
  """
  nodes: [Attachment]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type AttachmentEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: Attachment
}

input AttachmentFilter {
  byte_size_blank: String
  byte_size_cont: String
  byte_size_cont_all: [String!]
  byte_size_cont_any: [String!]
  byte_size_does_not_match: String
  byte_size_does_not_match_all: [String!]
  byte_size_does_not_match_any: [String!]
  byte_size_end: String
  byte_size_end_all: [String!]
  byte_size_end_any: [String!]
  byte_size_eq: String
  byte_size_eq_all: [String!]
  byte_size_eq_any: [String!]
  byte_size_false: String
  byte_size_gt: String
  byte_size_gt_all: [String!]
  byte_size_gt_any: [String!]
  byte_size_gteq: String
  byte_size_gteq_all: [String!]
  byte_size_gteq_any: [String!]
  byte_size_i_cont: String
  byte_size_i_cont_all: [String!]
  byte_size_i_cont_any: [String!]
  byte_size_in: [String!]
  byte_size_in_all: [String!]
  byte_size_in_any: [String!]
  byte_size_lt: String
  byte_size_lt_all: [String!]
  byte_size_lt_any: [String!]
  byte_size_lteq: String
  byte_size_lteq_all: [String!]
  byte_size_lteq_any: [String!]
  byte_size_matches: String
  byte_size_matches_all: [String!]
  byte_size_matches_any: [String!]
  byte_size_not_cont: String
  byte_size_not_cont_all: [String!]
  byte_size_not_cont_any: [String!]
  byte_size_not_end: String
  byte_size_not_end_all: [String!]
  byte_size_not_end_any: [String!]
  byte_size_not_eq: String
  byte_size_not_eq_all: [String!]
  byte_size_not_eq_any: [String!]
  byte_size_not_false: String
  byte_size_not_i_cont: String
  byte_size_not_i_cont_all: [String!]
  byte_size_not_i_cont_any: [String!]
  byte_size_not_in: [String!]
  byte_size_not_in_all: [String!]
  byte_size_not_in_any: [String!]
  byte_size_not_null: String
  byte_size_not_start: String
  byte_size_not_start_all: [String!]
  byte_size_not_start_any: [String!]
  byte_size_not_true: String
  byte_size_null: String
  byte_size_present: String
  byte_size_start: String
  byte_size_start_all: [String!]
  byte_size_start_any: [String!]
  byte_size_true: String
  created_at_blank: String
  created_at_cont: String
  created_at_cont_all: [String!]
  created_at_cont_any: [String!]
  created_at_does_not_match: String
  created_at_does_not_match_all: [String!]
  created_at_does_not_match_any: [String!]
  created_at_end: String
  created_at_end_all: [String!]
  created_at_end_any: [String!]
  created_at_eq: String
  created_at_eq_all: [String!]
  created_at_eq_any: [String!]
  created_at_false: String
  created_at_gt: String
  created_at_gt_all: [String!]
  created_at_gt_any: [String!]
  created_at_gteq: String
  created_at_gteq_all: [String!]
  created_at_gteq_any: [String!]
  created_at_i_cont: String
  created_at_i_cont_all: [String!]
  created_at_i_cont_any: [String!]
  created_at_in: [String!]
  created_at_in_all: [String!]
  created_at_in_any: [String!]
  created_at_lt: String
  created_at_lt_all: [String!]
  created_at_lt_any: [String!]
  created_at_lteq: String
  created_at_lteq_all: [String!]
  created_at_lteq_any: [String!]
  created_at_matches: String
  created_at_matches_all: [String!]
  created_at_matches_any: [String!]
  created_at_not_cont: String
  created_at_not_cont_all: [String!]
  created_at_not_cont_any: [String!]
  created_at_not_end: String
  created_at_not_end_all: [String!]
  created_at_not_end_any: [String!]
  created_at_not_eq: String
  created_at_not_eq_all: [String!]
  created_at_not_eq_any: [String!]
  created_at_not_false: String
  created_at_not_i_cont: String
  created_at_not_i_cont_all: [String!]
  created_at_not_i_cont_any: [String!]
  created_at_not_in: [String!]
  created_at_not_in_all: [String!]
  created_at_not_in_any: [String!]
  created_at_not_null: String
  created_at_not_start: String
  created_at_not_start_all: [String!]
  created_at_not_start_any: [String!]
  created_at_not_true: String
  created_at_null: String
  created_at_present: String
  created_at_start: String
  created_at_start_all: [String!]
  created_at_start_any: [String!]
  created_at_true: String
  filename_blank: String
  filename_cont: String
  filename_cont_all: [String!]
  filename_cont_any: [String!]
  filename_does_not_match: String
  filename_does_not_match_all: [String!]
  filename_does_not_match_any: [String!]
  filename_end: String
  filename_end_all: [String!]
  filename_end_any: [String!]
  filename_eq: String
  filename_eq_all: [String!]
  filename_eq_any: [String!]
  filename_false: String
  filename_gt: String
  filename_gt_all: [String!]
  filename_gt_any: [String!]
  filename_gteq: String
  filename_gteq_all: [String!]
  filename_gteq_any: [String!]
  filename_i_cont: String
  filename_i_cont_all: [String!]
  filename_i_cont_any: [String!]
  filename_in: [String!]
  filename_in_all: [String!]
  filename_in_any: [String!]
  filename_lt: String
  filename_lt_all: [String!]
  filename_lt_any: [String!]
  filename_lteq: String
  filename_lteq_all: [String!]
  filename_lteq_any: [String!]
  filename_matches: String
  filename_matches_all: [String!]
  filename_matches_any: [String!]
  filename_not_cont: String
  filename_not_cont_all: [String!]
  filename_not_cont_any: [String!]
  filename_not_end: String
  filename_not_end_all: [String!]
  filename_not_end_any: [String!]
  filename_not_eq: String
  filename_not_eq_all: [String!]
  filename_not_eq_any: [String!]
  filename_not_false: String
  filename_not_i_cont: String
  filename_not_i_cont_all: [String!]
  filename_not_i_cont_any: [String!]
  filename_not_in: [String!]
  filename_not_in_all: [String!]
  filename_not_in_any: [String!]
  filename_not_null: String
  filename_not_start: String
  filename_not_start_all: [String!]
  filename_not_start_any: [String!]
  filename_not_true: String
  filename_null: String
  filename_present: String
  filename_start: String
  filename_start_all: [String!]
  filename_start_any: [String!]
  filename_true: String

  """
  Filter attachments by metadata which contains the supplied key value pairs
  """
  metadata_jcont: JSON

  """
  Filter attachments by metadata which contains the key
  """
  metadata_jcont_key: String
  puid_blank: String
  puid_cont: String
  puid_cont_all: [String!]
  puid_cont_any: [String!]
  puid_does_not_match: String
  puid_does_not_match_all: [String!]
  puid_does_not_match_any: [String!]
  puid_end: String
  puid_end_all: [String!]
  puid_end_any: [String!]
  puid_eq: String
  puid_eq_all: [String!]
  puid_eq_any: [String!]
  puid_false: String
  puid_gt: String
  puid_gt_all: [String!]
  puid_gt_any: [String!]
  puid_gteq: String
  puid_gteq_all: [String!]
  puid_gteq_any: [String!]
  puid_i_cont: String
  puid_i_cont_all: [String!]
  puid_i_cont_any: [String!]
  puid_in: [String!]
  puid_in_all: [String!]
  puid_in_any: [String!]
  puid_lt: String
  puid_lt_all: [String!]
  puid_lt_any: [String!]
  puid_lteq: String
  puid_lteq_all: [String!]
  puid_lteq_any: [String!]
  puid_matches: String
  puid_matches_all: [String!]
  puid_matches_any: [String!]
  puid_not_cont: String
  puid_not_cont_all: [String!]
  puid_not_cont_any: [String!]
  puid_not_end: String
  puid_not_end_all: [String!]
  puid_not_end_any: [String!]
  puid_not_eq: String
  puid_not_eq_all: [String!]
  puid_not_eq_any: [String!]
  puid_not_false: String
  puid_not_i_cont: String
  puid_not_i_cont_all: [String!]
  puid_not_i_cont_any: [String!]
  puid_not_in: [String!]
  puid_not_in_all: [String!]
  puid_not_in_any: [String!]
  puid_not_null: String
  puid_not_start: String
  puid_not_start_all: [String!]
  puid_not_start_any: [String!]
  puid_not_true: String
  puid_null: String
  puid_present: String
  puid_start: String
  puid_start_all: [String!]
  puid_start_any: [String!]
  puid_true: String
  updated_at_blank: String
  updated_at_cont: String
  updated_at_cont_all: [String!]
  updated_at_cont_any: [String!]
  updated_at_does_not_match: String
  updated_at_does_not_match_all: [String!]
  updated_at_does_not_match_any: [String!]
  updated_at_end: String
  updated_at_end_all: [String!]
  updated_at_end_any: [String!]
  updated_at_eq: String
  updated_at_eq_all: [String!]
  updated_at_eq_any: [String!]
  updated_at_false: String
  updated_at_gt: String
  updated_at_gt_all: [String!]
  updated_at_gt_any: [String!]
  updated_at_gteq: String
  updated_at_gteq_all: [String!]
  updated_at_gteq_any: [String!]
  updated_at_i_cont: String
  updated_at_i_cont_all: [String!]
  updated_at_i_cont_any: [String!]
  updated_at_in: [String!]
  updated_at_in_all: [String!]
  updated_at_in_any: [String!]
  updated_at_lt: String
  updated_at_lt_all: [String!]
  updated_at_lt_any: [String!]
  updated_at_lteq: String
  updated_at_lteq_all: [String!]
  updated_at_lteq_any: [String!]
  updated_at_matches: String
  updated_at_matches_all: [String!]
  updated_at_matches_any: [String!]
  updated_at_not_cont: String
  updated_at_not_cont_all: [String!]
  updated_at_not_cont_any: [String!]
  updated_at_not_end: String
  updated_at_not_end_all: [String!]
  updated_at_not_end_any: [String!]
  updated_at_not_eq: String
  updated_at_not_eq_all: [String!]
  updated_at_not_eq_any: [String!]
  updated_at_not_false: String
  updated_at_not_i_cont: String
  updated_at_not_i_cont_all: [String!]
  updated_at_not_i_cont_any: [String!]
  updated_at_not_in: [String!]
  updated_at_not_in_all: [String!]
  updated_at_not_in_any: [String!]
  updated_at_not_null: String
  updated_at_not_start: String
  updated_at_not_start_all: [String!]
  updated_at_not_start_any: [String!]
  updated_at_not_true: String
  updated_at_null: String
  updated_at_present: String
  updated_at_start: String
  updated_at_start_all: [String!]
  updated_at_start_any: [String!]
  updated_at_true: String
}

"""
Specify a sort for the attachments
"""
input AttachmentOrder {
  direction: OrderDirection
  field: AttachmentOrderField!
}

"""
Field to sort the attachments by
"""
enum AttachmentOrderField {
  created_at
  filename
  updated_at
}

"""
Autogenerated input type of CloneSamples
"""
input CloneSamplesInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The Node ID of the project to copy to. For example, `gid://irida/Project/a84cd757-dedb-4c64-8b01-097020163077`.
  """
  newProjectId: ID

  """
  Persistent Unique Identifier of the project to copy to. For example, `INXT_PRJ_AAAAAAAAAA`.
  """
  newProjectPuid: ID

  """
  The Node ID of the project to copy to. For example, `gid://irida/Project/a84cd757-dedb-4c64-8b01-097020163077`.
  """
  projectId: ID

  """
  Persistent Unique Identifier of the project to copy to. For example, `INXT_PRJ_AAAAAAAAAA`.
  """
  projectPuid: ID

  """
  List of samples to copy.
  """
  sampleIds: [ID!]!
}

"""
Autogenerated return type of CloneSamples.
"""
type CloneSamplesPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  A list of errors that prevented the mutation.
  """
  errors: [UserError!]!

  """
  List of original and copied sample ids.
  """
  samples: JSON
}

"""
Autogenerated input type of CreateDirectUpload
"""
input CreateDirectUploadInput {
  """
  File size (bytes)
  """
  byteSize: Int!

  """
  MD5 file checksum as base64
  """
  checksum: String!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  File content type
  """
  contentType: String!

  """
  Original file name
  """
  filename: String!
}

"""
Autogenerated return type of CreateDirectUpload.
"""
type CreateDirectUploadPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Represents direct upload credentials
  """
  directUpload: DirectUpload!
}

"""
Autogenerated input type of CreateGroup
"""
input CreateGroupInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The description to give the group.
  """
  description: String

  """
  The Node ID of a group to create the sub group in. For example, `gid://irida/Group/a84cd757-dedb-4c64-8b01-097020163077`.
  """
  groupId: ID

  """
  Persistent Unique Identifier of a group to create the sub group in. For example, `INXT_GRP_AAAAAAAAAA`.
  """
  groupPuid: ID

  """
  The name to give the group.
  """
  name: String!

  """
  A custom path for the group.
  """
  path: String
}

"""
Autogenerated return type of CreateGroup.
"""
type CreateGroupPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  A list of errors that prevented the mutation.
  """
  errors: [UserError!]!

  """
  The newly created group.
  """
  group: Group
}

"""
Autogenerated input type of CreateProject
"""
input CreateProjectInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The description to give the project.
  """
  description: String

  """
  The Node ID of a group to create the project in. For example, `gid://irida/Group/a84cd757-dedb-4c64-8b01-097020163077`.
  """
  groupId: ID

  """
  Persistent Unique Identifier of a group to create the project in. For example, `INXT_GRP_AAAAAAAAAA`.
  """
  groupPuid: ID

  """
  The name to give the project.
  """
  name: String!

  """
  A custom path for the project.
  """
  path: String
}

"""
Autogenerated return type of CreateProject.
"""
type CreateProjectPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  A list of errors that prevented the mutation.
  """
  errors: [UserError!]!

  """
  The newly created project.
  """
  project: Project
}

"""
Autogenerated input type of CreateSample
"""
input CreateSampleInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The description to give the sample.
  """
  description: String

  """
  The name to give the sample.
  """
  name: String!

  """
  The Node ID of the project. For example, `gid://irida/Project/a84cd757-dedb-4c64-8b01-097020163077`.
  """
  projectId: ID

  """
  Persistent Unique Identifier of the project. For example, `INXT_PRJ_AAAAAAAAAA`.
  """
  projectPuid: ID
}

"""
Autogenerated return type of CreateSample.
"""
type CreateSamplePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  A list of errors that prevented the mutation.
  """
  errors: [UserError!]!

  """
  The newly created sample.
  """
  sample: Sample
}

"""
Represents direct upload credentials
"""
type DirectUpload {
  """
  Created blob record ID
  """
  blobId: ID!

  """
  HTTP request headers (JSON-encoded)
  """
  headers: String!

  """
  Created blob record signed ID
  """
  signedBlobId: ID!

  """
  Upload URL
  """
  url: String!
}

"""
A group
"""
type Group implements Node {
  """
  Attachments on the group
  """
  attachments(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Ransack filter
    """
    filter: AttachmentFilter = null

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Order by
    """
    orderBy: AttachmentOrder = null
  ): AttachmentConnection

  """
  Datetime of creation.
  """
  createdAt: ISO8601DateTime!

  """
  List of descendant groups of this group.
  """
  descendantGroups(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    List of descendant groups of the parent group.
    """
    includeParentDescendants: Boolean = true

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): GroupConnection

  """
  Description of the namespace.
  """
  description: String

  """
  Full name of the namespace.
  """
  fullName: String!

  """
  Full path of the namespace.
  """
  fullPath: ID!

  """
  ID of the object.
  """
  id: ID!

  """
  Name of the namespace.
  """
  name: String!

  """
  Parent group.
  """
  parent: Group

  """
  Path of the namespace.
  """
  path: String!

  """
  Projects within this namespace
  """
  projects(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Include projects from subgroups.
    """
    includeSubGroups: Boolean = false

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ProjectConnection

  """
  Persistent Unique Identifier of the namespace. For example for a group,
                                    `INXT_GRP_AAAAAAAAAA`.
  """
  puid: ID!

  """
  Datetime of last update.
  """
  updatedAt: ISO8601DateTime!
}

"""
The connection type for Group.
"""
type GroupConnection {
  """
  A list of edges.
  """
  edges: [GroupEdge]

  """
  A list of nodes.
  """
  nodes: [Group]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type GroupEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: Group
}

input GroupFilter {
  created_at_blank: String
  created_at_cont: String
  created_at_cont_all: [String!]
  created_at_cont_any: [String!]
  created_at_does_not_match: String
  created_at_does_not_match_all: [String!]
  created_at_does_not_match_any: [String!]
  created_at_end: String
  created_at_end_all: [String!]
  created_at_end_any: [String!]
  created_at_eq: String
  created_at_eq_all: [String!]
  created_at_eq_any: [String!]
  created_at_false: String
  created_at_gt: String
  created_at_gt_all: [String!]
  created_at_gt_any: [String!]
  created_at_gteq: String
  created_at_gteq_all: [String!]
  created_at_gteq_any: [String!]
  created_at_i_cont: String
  created_at_i_cont_all: [String!]
  created_at_i_cont_any: [String!]
  created_at_in: [String!]
  created_at_in_all: [String!]
  created_at_in_any: [String!]
  created_at_lt: String
  created_at_lt_all: [String!]
  created_at_lt_any: [String!]
  created_at_lteq: String
  created_at_lteq_all: [String!]
  created_at_lteq_any: [String!]
  created_at_matches: String
  created_at_matches_all: [String!]
  created_at_matches_any: [String!]
  created_at_not_cont: String
  created_at_not_cont_all: [String!]
  created_at_not_cont_any: [String!]
  created_at_not_end: String
  created_at_not_end_all: [String!]
  created_at_not_end_any: [String!]
  created_at_not_eq: String
  created_at_not_eq_all: [String!]
  created_at_not_eq_any: [String!]
  created_at_not_false: String
  created_at_not_i_cont: String
  created_at_not_i_cont_all: [String!]
  created_at_not_i_cont_any: [String!]
  created_at_not_in: [String!]
  created_at_not_in_all: [String!]
  created_at_not_in_any: [String!]
  created_at_not_null: String
  created_at_not_start: String
  created_at_not_start_all: [String!]
  created_at_not_start_any: [String!]
  created_at_not_true: String
  created_at_null: String
  created_at_present: String
  created_at_start: String
  created_at_start_all: [String!]
  created_at_start_any: [String!]
  created_at_true: String
  name_blank: String
  name_cont: String
  name_cont_all: [String!]
  name_cont_any: [String!]
  name_does_not_match: String
  name_does_not_match_all: [String!]
  name_does_not_match_any: [String!]
  name_end: String
  name_end_all: [String!]
  name_end_any: [String!]
  name_eq: String
  name_eq_all: [String!]
  name_eq_any: [String!]
  name_false: String
  name_gt: String
  name_gt_all: [String!]
  name_gt_any: [String!]
  name_gteq: String
  name_gteq_all: [String!]
  name_gteq_any: [String!]
  name_i_cont: String
  name_i_cont_all: [String!]
  name_i_cont_any: [String!]
  name_in: [String!]
  name_in_all: [String!]
  name_in_any: [String!]
  name_lt: String
  name_lt_all: [String!]
  name_lt_any: [String!]
  name_lteq: String
  name_lteq_all: [String!]
  name_lteq_any: [String!]
  name_matches: String
  name_matches_all: [String!]
  name_matches_any: [String!]
  name_not_cont: String
  name_not_cont_all: [String!]
  name_not_cont_any: [String!]
  name_not_end: String
  name_not_end_all: [String!]
  name_not_end_any: [String!]
  name_not_eq: String
  name_not_eq_all: [String!]
  name_not_eq_any: [String!]
  name_not_false: String
  name_not_i_cont: String
  name_not_i_cont_all: [String!]
  name_not_i_cont_any: [String!]
  name_not_in: [String!]
  name_not_in_all: [String!]
  name_not_in_any: [String!]
  name_not_null: String
  name_not_start: String
  name_not_start_all: [String!]
  name_not_start_any: [String!]
  name_not_true: String
  name_null: String
  name_present: String
  name_start: String
  name_start_all: [String!]
  name_start_any: [String!]
  name_true: String
  puid_blank: String
  puid_cont: String
  puid_cont_all: [String!]
  puid_cont_any: [String!]
  puid_does_not_match: String
  puid_does_not_match_all: [String!]
  puid_does_not_match_any: [String!]
  puid_end: String
  puid_end_all: [String!]
  puid_end_any: [String!]
  puid_eq: String
  puid_eq_all: [String!]
  puid_eq_any: [String!]
  puid_false: String
  puid_gt: String
  puid_gt_all: [String!]
  puid_gt_any: [String!]
  puid_gteq: String
  puid_gteq_all: [String!]
  puid_gteq_any: [String!]
  puid_i_cont: String
  puid_i_cont_all: [String!]
  puid_i_cont_any: [String!]
  puid_in: [String!]
  puid_in_all: [String!]
  puid_in_any: [String!]
  puid_lt: String
  puid_lt_all: [String!]
  puid_lt_any: [String!]
  puid_lteq: String
  puid_lteq_all: [String!]
  puid_lteq_any: [String!]
  puid_matches: String
  puid_matches_all: [String!]
  puid_matches_any: [String!]
  puid_not_cont: String
  puid_not_cont_all: [String!]
  puid_not_cont_any: [String!]
  puid_not_end: String
  puid_not_end_all: [String!]
  puid_not_end_any: [String!]
  puid_not_eq: String
  puid_not_eq_all: [String!]
  puid_not_eq_any: [String!]
  puid_not_false: String
  puid_not_i_cont: String
  puid_not_i_cont_all: [String!]
  puid_not_i_cont_any: [String!]
  puid_not_in: [String!]
  puid_not_in_all: [String!]
  puid_not_in_any: [String!]
  puid_not_null: String
  puid_not_start: String
  puid_not_start_all: [String!]
  puid_not_start_any: [String!]
  puid_not_true: String
  puid_null: String
  puid_present: String
  puid_start: String
  puid_start_all: [String!]
  puid_start_any: [String!]
  puid_true: String
  updated_at_blank: String
  updated_at_cont: String
  updated_at_cont_all: [String!]
  updated_at_cont_any: [String!]
  updated_at_does_not_match: String
  updated_at_does_not_match_all: [String!]
  updated_at_does_not_match_any: [String!]
  updated_at_end: String
  updated_at_end_all: [String!]
  updated_at_end_any: [String!]
  updated_at_eq: String
  updated_at_eq_all: [String!]
  updated_at_eq_any: [String!]
  updated_at_false: String
  updated_at_gt: String
  updated_at_gt_all: [String!]
  updated_at_gt_any: [String!]
  updated_at_gteq: String
  updated_at_gteq_all: [String!]
  updated_at_gteq_any: [String!]
  updated_at_i_cont: String
  updated_at_i_cont_all: [String!]
  updated_at_i_cont_any: [String!]
  updated_at_in: [String!]
  updated_at_in_all: [String!]
  updated_at_in_any: [String!]
  updated_at_lt: String
  updated_at_lt_all: [String!]
  updated_at_lt_any: [String!]
  updated_at_lteq: String
  updated_at_lteq_all: [String!]
  updated_at_lteq_any: [String!]
  updated_at_matches: String
  updated_at_matches_all: [String!]
  updated_at_matches_any: [String!]
  updated_at_not_cont: String
  updated_at_not_cont_all: [String!]
  updated_at_not_cont_any: [String!]
  updated_at_not_end: String
  updated_at_not_end_all: [String!]
  updated_at_not_end_any: [String!]
  updated_at_not_eq: String
  updated_at_not_eq_all: [String!]
  updated_at_not_eq_any: [String!]
  updated_at_not_false: String
  updated_at_not_i_cont: String
  updated_at_not_i_cont_all: [String!]
  updated_at_not_i_cont_any: [String!]
  updated_at_not_in: [String!]
  updated_at_not_in_all: [String!]
  updated_at_not_in_any: [String!]
  updated_at_not_null: String
  updated_at_not_start: String
  updated_at_not_start_all: [String!]
  updated_at_not_start_any: [String!]
  updated_at_not_true: String
  updated_at_null: String
  updated_at_present: String
  updated_at_start: String
  updated_at_start_all: [String!]
  updated_at_start_any: [String!]
  updated_at_true: String
}

"""
Specify a sort for the groups
"""
input GroupOrder {
  direction: OrderDirection
  field: GroupOrderField!
}

"""
Field to sort the groups by
"""
enum GroupOrderField {
  created_at
  name
  updated_at
}

"""
An ISO 8601-encoded datetime
"""
scalar ISO8601DateTime @specifiedBy(url: "https://tools.ietf.org/html/rfc3339")

"""
Represents untyped JSON
"""
scalar JSON

"""
The mutation root of this schema
"""
type Mutation {
  """
  Attaches files to group.
  """
  attachFilesToGroup(
    """
    Parameters for AttachFilesToGroup
    """
    input: AttachFilesToGroupInput!
  ): AttachFilesToGroupPayload

  """
  Attaches files to project.
  """
  attachFilesToProject(
    """
    Parameters for AttachFilesToProject
    """
    input: AttachFilesToProjectInput!
  ): AttachFilesToProjectPayload

  """
  Attaches files to sample.
  """
  attachFilesToSample(
    """
    Parameters for AttachFilesToSample
    """
    input: AttachFilesToSampleInput!
  ): AttachFilesToSamplePayload

  """
  Copy samples to another project.
  """
  copySamples(
    """
    Parameters for CloneSamples
    """
    input: CloneSamplesInput!
  ): CloneSamplesPayload

  """
  Create blob to upload data to.
  """
  createDirectUpload(
    """
    Parameters for CreateDirectUpload
    """
    input: CreateDirectUploadInput!
  ): CreateDirectUploadPayload

  """
  Create a new group..
  """
  createGroup(
    """
    Parameters for CreateGroup
    """
    input: CreateGroupInput!
  ): CreateGroupPayload

  """
  Create a new project..
  """
  createProject(
    """
    Parameters for CreateProject
    """
    input: CreateProjectInput!
  ): CreateProjectPayload

  """
  Create a new sample within an existing project.
  """
  createSample(
    """
    Parameters for CreateSample
    """
    input: CreateSampleInput!
  ): CreateSamplePayload

  """
  Transfer a list of sample to another project.
  """
  transferSamples(
    """
    Parameters for TransferSamples
    """
    input: TransferSamplesInput!
  ): TransferSamplesPayload

  """
  Update metadata for a sample.
  """
  updateSampleMetadata(
    """
    Parameters for UpdateSampleMetadata
    """
    input: UpdateSampleMetadataInput!
  ): UpdateSampleMetadataPayload
}

"""
A namespace
"""
type Namespace implements Node {
  """
  Datetime of creation.
  """
  createdAt: ISO8601DateTime!

  """
  Description of the namespace.
  """
  description: String

  """
  Full name of the namespace.
  """
  fullName: String!

  """
  Full path of the namespace.
  """
  fullPath: ID!

  """
  ID of the object.
  """
  id: ID!

  """
  Name of the namespace.
  """
  name: String!

  """
  Path of the namespace.
  """
  path: String!

  """
  Projects within this namespace
  """
  projects(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Include projects from subgroups.
    """
    includeSubGroups: Boolean = false

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ProjectConnection

  """
  Persistent Unique Identifier of the namespace. For example for a group,
                                    `INXT_GRP_AAAAAAAAAA`.
  """
  puid: ID!

  """
  Datetime of last update.
  """
  updatedAt: ISO8601DateTime!
}

"""
An object with an ID.
"""
interface Node {
  """
  ID of the object.
  """
  id: ID!
}

"""
Sort by the specified order
"""
enum OrderDirection {
  asc
  desc
}

"""
Information about pagination in a connection.
"""
type PageInfo {
  """
  When paginating forwards, the cursor to continue.
  """
  endCursor: String

  """
  When paginating forwards, are there more items?
  """
  hasNextPage: Boolean!

  """
  When paginating backwards, are there more items?
  """
  hasPreviousPage: Boolean!

  """
  When paginating backwards, the cursor to continue.
  """
  startCursor: String
}

"""
A pipeline
"""
type Pipeline {
  """
  
  """
  automatable: Boolean

  """
  
  """
  description: String

  """
  
  """
  engine: String

  """
  
  """
  engineVersion: String

  """
  
  """
  executable: Boolean

  """
  
  """
  metadata: JSON

  """
  
  """
  name: String

  """
  
  """
  type: String

  """
  
  """
  typeVersion: String

  """
  URL of the pipeline GitHub repository
  """
  url: String!

  """
  
  """
  version: String

  """
  
  """
  workflowParams: JSON!
}

"""
A project
"""
type Project implements Node {
  """
  Attachments on the project
  """
  attachments(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Ransack filter
    """
    filter: AttachmentFilter = null

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Order by
    """
    orderBy: AttachmentOrder = null
  ): AttachmentConnection

  """
  Datetime of creation.
  """
  createdAt: ISO8601DateTime!

  """
  Description of the project.
  """
  description: String

  """
  Full name of the project.
  """
  fullName: String!

  """
  Full path of the project.
  """
  fullPath: ID!

  """
  ID of the object.
  """
  id: ID!

  """
  Metadata summary for the project
  """
  metadataSummary(
    """
    Optional array of keys to limit metadata summary result to.
    """
    keys: [String!] = null
  ): JSON!

  """
  Name of the project.
  """
  name: String!

  """
  Parent namespace
  """
  parent: Namespace!

  """
  Path of the project.
  """
  path: String!

  """
  Persistent Unique Identifier of the project. For example, `INXT_PRJ_AAAAAAAAAA`.
  """
  puid: ID!

  """
  Samples on the project
  """
  samples(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Ransack filter
    """
    filter: SampleFilter = null

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Order by
    """
    orderBy: SampleOrder = null
  ): SampleConnection

  """
  Datetime of last update.
  """
  updatedAt: ISO8601DateTime!
}

"""
The connection type for Project.
"""
type ProjectConnection {
  """
  A list of edges.
  """
  edges: [ProjectEdge]

  """
  A list of nodes.
  """
  nodes: [Project]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type ProjectEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: Project
}

input ProjectFilter {
  created_at_blank: String
  created_at_cont: String
  created_at_cont_all: [String!]
  created_at_cont_any: [String!]
  created_at_does_not_match: String
  created_at_does_not_match_all: [String!]
  created_at_does_not_match_any: [String!]
  created_at_end: String
  created_at_end_all: [String!]
  created_at_end_any: [String!]
  created_at_eq: String
  created_at_eq_all: [String!]
  created_at_eq_any: [String!]
  created_at_false: String
  created_at_gt: String
  created_at_gt_all: [String!]
  created_at_gt_any: [String!]
  created_at_gteq: String
  created_at_gteq_all: [String!]
  created_at_gteq_any: [String!]
  created_at_i_cont: String
  created_at_i_cont_all: [String!]
  created_at_i_cont_any: [String!]
  created_at_in: [String!]
  created_at_in_all: [String!]
  created_at_in_any: [String!]
  created_at_lt: String
  created_at_lt_all: [String!]
  created_at_lt_any: [String!]
  created_at_lteq: String
  created_at_lteq_all: [String!]
  created_at_lteq_any: [String!]
  created_at_matches: String
  created_at_matches_all: [String!]
  created_at_matches_any: [String!]
  created_at_not_cont: String
  created_at_not_cont_all: [String!]
  created_at_not_cont_any: [String!]
  created_at_not_end: String
  created_at_not_end_all: [String!]
  created_at_not_end_any: [String!]
  created_at_not_eq: String
  created_at_not_eq_all: [String!]
  created_at_not_eq_any: [String!]
  created_at_not_false: String
  created_at_not_i_cont: String
  created_at_not_i_cont_all: [String!]
  created_at_not_i_cont_any: [String!]
  created_at_not_in: [String!]
  created_at_not_in_all: [String!]
  created_at_not_in_any: [String!]
  created_at_not_null: String
  created_at_not_start: String
  created_at_not_start_all: [String!]
  created_at_not_start_any: [String!]
  created_at_not_true: String
  created_at_null: String
  created_at_present: String
  created_at_start: String
  created_at_start_all: [String!]
  created_at_start_any: [String!]
  created_at_true: String
  name_blank: String
  name_cont: String
  name_cont_all: [String!]
  name_cont_any: [String!]
  name_does_not_match: String
  name_does_not_match_all: [String!]
  name_does_not_match_any: [String!]
  name_end: String
  name_end_all: [String!]
  name_end_any: [String!]
  name_eq: String
  name_eq_all: [String!]
  name_eq_any: [String!]
  name_false: String
  name_gt: String
  name_gt_all: [String!]
  name_gt_any: [String!]
  name_gteq: String
  name_gteq_all: [String!]
  name_gteq_any: [String!]
  name_i_cont: String
  name_i_cont_all: [String!]
  name_i_cont_any: [String!]
  name_in: [String!]
  name_in_all: [String!]
  name_in_any: [String!]
  name_lt: String
  name_lt_all: [String!]
  name_lt_any: [String!]
  name_lteq: String
  name_lteq_all: [String!]
  name_lteq_any: [String!]
  name_matches: String
  name_matches_all: [String!]
  name_matches_any: [String!]
  name_not_cont: String
  name_not_cont_all: [String!]
  name_not_cont_any: [String!]
  name_not_end: String
  name_not_end_all: [String!]
  name_not_end_any: [String!]
  name_not_eq: String
  name_not_eq_all: [String!]
  name_not_eq_any: [String!]
  name_not_false: String
  name_not_i_cont: String
  name_not_i_cont_all: [String!]
  name_not_i_cont_any: [String!]
  name_not_in: [String!]
  name_not_in_all: [String!]
  name_not_in_any: [String!]
  name_not_null: String
  name_not_start: String
  name_not_start_all: [String!]
  name_not_start_any: [String!]
  name_not_true: String
  name_null: String
  name_present: String
  name_start: String
  name_start_all: [String!]
  name_start_any: [String!]
  name_true: String
  puid_blank: String
  puid_cont: String
  puid_cont_all: [String!]
  puid_cont_any: [String!]
  puid_does_not_match: String
  puid_does_not_match_all: [String!]
  puid_does_not_match_any: [String!]
  puid_end: String
  puid_end_all: [String!]
  puid_end_any: [String!]
  puid_eq: String
  puid_eq_all: [String!]
  puid_eq_any: [String!]
  puid_false: String
  puid_gt: String
  puid_gt_all: [String!]
  puid_gt_any: [String!]
  puid_gteq: String
  puid_gteq_all: [String!]
  puid_gteq_any: [String!]
  puid_i_cont: String
  puid_i_cont_all: [String!]
  puid_i_cont_any: [String!]
  puid_in: [String!]
  puid_in_all: [String!]
  puid_in_any: [String!]
  puid_lt: String
  puid_lt_all: [String!]
  puid_lt_any: [String!]
  puid_lteq: String
  puid_lteq_all: [String!]
  puid_lteq_any: [String!]
  puid_matches: String
  puid_matches_all: [String!]
  puid_matches_any: [String!]
  puid_not_cont: String
  puid_not_cont_all: [String!]
  puid_not_cont_any: [String!]
  puid_not_end: String
  puid_not_end_all: [String!]
  puid_not_end_any: [String!]
  puid_not_eq: String
  puid_not_eq_all: [String!]
  puid_not_eq_any: [String!]
  puid_not_false: String
  puid_not_i_cont: String
  puid_not_i_cont_all: [String!]
  puid_not_i_cont_any: [String!]
  puid_not_in: [String!]
  puid_not_in_all: [String!]
  puid_not_in_any: [String!]
  puid_not_null: String
  puid_not_start: String
  puid_not_start_all: [String!]
  puid_not_start_any: [String!]
  puid_not_true: String
  puid_null: String
  puid_present: String
  puid_start: String
  puid_start_all: [String!]
  puid_start_any: [String!]
  puid_true: String
  updated_at_blank: String
  updated_at_cont: String
  updated_at_cont_all: [String!]
  updated_at_cont_any: [String!]
  updated_at_does_not_match: String
  updated_at_does_not_match_all: [String!]
  updated_at_does_not_match_any: [String!]
  updated_at_end: String
  updated_at_end_all: [String!]
  updated_at_end_any: [String!]
  updated_at_eq: String
  updated_at_eq_all: [String!]
  updated_at_eq_any: [String!]
  updated_at_false: String
  updated_at_gt: String
  updated_at_gt_all: [String!]
  updated_at_gt_any: [String!]
  updated_at_gteq: String
  updated_at_gteq_all: [String!]
  updated_at_gteq_any: [String!]
  updated_at_i_cont: String
  updated_at_i_cont_all: [String!]
  updated_at_i_cont_any: [String!]
  updated_at_in: [String!]
  updated_at_in_all: [String!]
  updated_at_in_any: [String!]
  updated_at_lt: String
  updated_at_lt_all: [String!]
  updated_at_lt_any: [String!]
  updated_at_lteq: String
  updated_at_lteq_all: [String!]
  updated_at_lteq_any: [String!]
  updated_at_matches: String
  updated_at_matches_all: [String!]
  updated_at_matches_any: [String!]
  updated_at_not_cont: String
  updated_at_not_cont_all: [String!]
  updated_at_not_cont_any: [String!]
  updated_at_not_end: String
  updated_at_not_end_all: [String!]
  updated_at_not_end_any: [String!]
  updated_at_not_eq: String
  updated_at_not_eq_all: [String!]
  updated_at_not_eq_any: [String!]
  updated_at_not_false: String
  updated_at_not_i_cont: String
  updated_at_not_i_cont_all: [String!]
  updated_at_not_i_cont_any: [String!]
  updated_at_not_in: [String!]
  updated_at_not_in_all: [String!]
  updated_at_not_in_any: [String!]
  updated_at_not_null: String
  updated_at_not_start: String
  updated_at_not_start_all: [String!]
  updated_at_not_start_any: [String!]
  updated_at_not_true: String
  updated_at_null: String
  updated_at_present: String
  updated_at_start: String
  updated_at_start_all: [String!]
  updated_at_start_any: [String!]
  updated_at_true: String
}

"""
Specify a sort for the projects
"""
input ProjectOrder {
  direction: OrderDirection
  field: ProjectOrderField!
}

"""
Field to sort the samples by
"""
enum ProjectOrderField {
  created_at
  name
  updated_at
}

"""
The query root of this schema
"""
type Query {
  """
  Get information about current user.
  """
  currentUser: User

  """
  Find a group.
  """
  group(
    """
    Full path of the group. For example, `pathogen/surveillance`.
    """
    fullPath: ID

    """
    Persistent Unique Identifer of the group. For example, `INXT_GRP_GGGGGGGGGG.`
    """
    puid: ID
  ): Group

  """
  Find groups.
  """
  groups(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Ransack filter
    """
    filter: GroupFilter = null

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Order by
    """
    orderBy: GroupOrder = null
  ): GroupConnection!

  """
  Boolean
  """
  isPuid(
    """
    ID to compare to puid format
    """
    id: ID!
  ): Boolean!

  """
  Find a namespace.
  """
  namespace(
    """
    Full path of the namespace. For example, `pathogen/surveillance`.
    """
    fullPath: ID

    """
    Persistent Unique Identifer of the namespace.
                               For example a group namespace, `INXT_GRP_GGGGGGGGGG.`
    """
    puid: ID
  ): Namespace

  """
  Fetches an object given its ID.
  """
  node(
    """
    ID of the object.
    """
    id: ID!
  ): Node

  """
  Fetches a list of objects given a list of IDs.
  """
  nodes(
    """
    IDs of the objects.
    """
    ids: [ID!]!
  ): [Node]!

  """
  Find Pipelines
  """
  pipeline(
    """
    Name of the Workflow
    """
    workflowName: String!

    """
    Can specify `automatable` for automatable pipelines, or `available` for all
    pipelines. By default only 'executable' pipelines are returned.
    """
    workflowType: String = "executable"

    """
    Version of the Workflow
    """
    workflowVersion: String!
  ): Pipeline

  """
  Find Pipelines
  """
  pipelines(
    """
    Can specify `automatable` for automatable pipelines, or `available` for all
    pipelines. By default only `executable` pipelines are returned.
    """
    workflowType: String = "executable"
  ): [Pipeline!]

  """
  Find a project.
  """
  project(
    """
    Full path of the project. For example, `pathogen/surveillance/2023`.
    """
    fullPath: ID

    """
    Persistent Unique Identifier of the project. For example, `INXT_PRJ_AAAAAAAAAA`.
    """
    puid: ID
  ): Project

  """
  Find a sample within a project.
  """
  projectSample(
    """
    Persistent Unique Identifier of the project. For example, `INXT_PRJ_AAAAAAAAAA`.
    """
    projectPuid: ID!

    """
    Name of the sample.
    """
    sampleName: String

    """
    Persistent Unique Identifier of the sample. For example, `INXT_SAM_AAAAAAAAAA`.
    """
    samplePuid: ID
  ): Sample

  """
  Find projects.
  """
  projects(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Ransack filter
    """
    filter: ProjectFilter = null

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Optional group identifier to return list of projects for (includes direct, indirect, and shared projects).
    """
    groupId: ID = null

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Order by
    """
    orderBy: ProjectOrder = null
  ): ProjectConnection

  """
  Find a sample.
  """
  sample(
    """
    Persistent Unique Identifier of the sample. For example, `INXT_SAM_AAAAAAAAAA`.
    """
    puid: ID!
  ): Sample

  """
  Find samples.
  """
  samples(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Ransack filter
    """
    filter: SampleFilter = null

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Optional group identifier to return list of samples for.
    """
    groupId: ID = null

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Order by
    """
    orderBy: SampleOrder = null
  ): SampleConnection
}

"""
A sample
"""
type Sample implements Node {
  """
  Attachments on the sample
  """
  attachments(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Ransack filter
    """
    filter: AttachmentFilter = null

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Order by
    """
    orderBy: AttachmentOrder = null
  ): AttachmentConnection

  """
  Datetime when associated attachments were last updated.
  """
  attachmentsUpdatedAt: ISO8601DateTime

  """
  Datetime of creation.
  """
  createdAt: ISO8601DateTime!

  """
  Description of the sample.
  """
  description: String

  """
  ID of the object.
  """
  id: ID!

  """
  Metadata for the sample
  """
  metadata(
    """
    Optional array of keys to limit metadata result to.
    """
    keys: [String!] = null
  ): JSON!

  """
  Name of the sample.
  """
  name: String!

  """
  Project the sample is on.
  """
  project: Project!

  """
  Persistent Unique Identifier of the sample. For example, `INXT_SAM_AAAAAAAAAAAA`.
  """
  puid: ID!

  """
  Datetime of last update.
  """
  updatedAt: ISO8601DateTime!
}

"""
The connection type for Sample.
"""
type SampleConnection {
  """
  A list of edges.
  """
  edges: [SampleEdge]

  """
  A list of nodes.
  """
  nodes: [Sample]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type SampleEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: Sample
}

input SampleFilter {
  attachments_updated_at_blank: String
  attachments_updated_at_cont: String
  attachments_updated_at_cont_all: [String!]
  attachments_updated_at_cont_any: [String!]
  attachments_updated_at_does_not_match: String
  attachments_updated_at_does_not_match_all: [String!]
  attachments_updated_at_does_not_match_any: [String!]
  attachments_updated_at_end: String
  attachments_updated_at_end_all: [String!]
  attachments_updated_at_end_any: [String!]
  attachments_updated_at_eq: String
  attachments_updated_at_eq_all: [String!]
  attachments_updated_at_eq_any: [String!]
  attachments_updated_at_false: String
  attachments_updated_at_gt: String
  attachments_updated_at_gt_all: [String!]
  attachments_updated_at_gt_any: [String!]
  attachments_updated_at_gteq: String
  attachments_updated_at_gteq_all: [String!]
  attachments_updated_at_gteq_any: [String!]
  attachments_updated_at_i_cont: String
  attachments_updated_at_i_cont_all: [String!]
  attachments_updated_at_i_cont_any: [String!]
  attachments_updated_at_in: [String!]
  attachments_updated_at_in_all: [String!]
  attachments_updated_at_in_any: [String!]
  attachments_updated_at_lt: String
  attachments_updated_at_lt_all: [String!]
  attachments_updated_at_lt_any: [String!]
  attachments_updated_at_lteq: String
  attachments_updated_at_lteq_all: [String!]
  attachments_updated_at_lteq_any: [String!]
  attachments_updated_at_matches: String
  attachments_updated_at_matches_all: [String!]
  attachments_updated_at_matches_any: [String!]
  attachments_updated_at_not_cont: String
  attachments_updated_at_not_cont_all: [String!]
  attachments_updated_at_not_cont_any: [String!]
  attachments_updated_at_not_end: String
  attachments_updated_at_not_end_all: [String!]
  attachments_updated_at_not_end_any: [String!]
  attachments_updated_at_not_eq: String
  attachments_updated_at_not_eq_all: [String!]
  attachments_updated_at_not_eq_any: [String!]
  attachments_updated_at_not_false: String
  attachments_updated_at_not_i_cont: String
  attachments_updated_at_not_i_cont_all: [String!]
  attachments_updated_at_not_i_cont_any: [String!]
  attachments_updated_at_not_in: [String!]
  attachments_updated_at_not_in_all: [String!]
  attachments_updated_at_not_in_any: [String!]
  attachments_updated_at_not_null: String
  attachments_updated_at_not_start: String
  attachments_updated_at_not_start_all: [String!]
  attachments_updated_at_not_start_any: [String!]
  attachments_updated_at_not_true: String
  attachments_updated_at_null: String
  attachments_updated_at_present: String
  attachments_updated_at_start: String
  attachments_updated_at_start_all: [String!]
  attachments_updated_at_start_any: [String!]
  attachments_updated_at_true: String
  created_at_blank: String
  created_at_cont: String
  created_at_cont_all: [String!]
  created_at_cont_any: [String!]
  created_at_does_not_match: String
  created_at_does_not_match_all: [String!]
  created_at_does_not_match_any: [String!]
  created_at_end: String
  created_at_end_all: [String!]
  created_at_end_any: [String!]
  created_at_eq: String
  created_at_eq_all: [String!]
  created_at_eq_any: [String!]
  created_at_false: String
  created_at_gt: String
  created_at_gt_all: [String!]
  created_at_gt_any: [String!]
  created_at_gteq: String
  created_at_gteq_all: [String!]
  created_at_gteq_any: [String!]
  created_at_i_cont: String
  created_at_i_cont_all: [String!]
  created_at_i_cont_any: [String!]
  created_at_in: [String!]
  created_at_in_all: [String!]
  created_at_in_any: [String!]
  created_at_lt: String
  created_at_lt_all: [String!]
  created_at_lt_any: [String!]
  created_at_lteq: String
  created_at_lteq_all: [String!]
  created_at_lteq_any: [String!]
  created_at_matches: String
  created_at_matches_all: [String!]
  created_at_matches_any: [String!]
  created_at_not_cont: String
  created_at_not_cont_all: [String!]
  created_at_not_cont_any: [String!]
  created_at_not_end: String
  created_at_not_end_all: [String!]
  created_at_not_end_any: [String!]
  created_at_not_eq: String
  created_at_not_eq_all: [String!]
  created_at_not_eq_any: [String!]
  created_at_not_false: String
  created_at_not_i_cont: String
  created_at_not_i_cont_all: [String!]
  created_at_not_i_cont_any: [String!]
  created_at_not_in: [String!]
  created_at_not_in_all: [String!]
  created_at_not_in_any: [String!]
  created_at_not_null: String
  created_at_not_start: String
  created_at_not_start_all: [String!]
  created_at_not_start_any: [String!]
  created_at_not_true: String
  created_at_null: String
  created_at_present: String
  created_at_start: String
  created_at_start_all: [String!]
  created_at_start_any: [String!]
  created_at_true: String

  """
  Filter samples by metadata which contains the supplied key value pairs
  """
  metadata_jcont: JSON

  """
  Filter samples by metadata which contains the key
  """
  metadata_jcont_key: String
  name_blank: String
  name_cont: String
  name_cont_all: [String!]
  name_cont_any: [String!]
  name_does_not_match: String
  name_does_not_match_all: [String!]
  name_does_not_match_any: [String!]
  name_end: String
  name_end_all: [String!]
  name_end_any: [String!]
  name_eq: String
  name_eq_all: [String!]
  name_eq_any: [String!]
  name_false: String
  name_gt: String
  name_gt_all: [String!]
  name_gt_any: [String!]
  name_gteq: String
  name_gteq_all: [String!]
  name_gteq_any: [String!]
  name_i_cont: String
  name_i_cont_all: [String!]
  name_i_cont_any: [String!]
  name_in: [String!]
  name_in_all: [String!]
  name_in_any: [String!]
  name_lt: String
  name_lt_all: [String!]
  name_lt_any: [String!]
  name_lteq: String
  name_lteq_all: [String!]
  name_lteq_any: [String!]
  name_matches: String
  name_matches_all: [String!]
  name_matches_any: [String!]
  name_not_cont: String
  name_not_cont_all: [String!]
  name_not_cont_any: [String!]
  name_not_end: String
  name_not_end_all: [String!]
  name_not_end_any: [String!]
  name_not_eq: String
  name_not_eq_all: [String!]
  name_not_eq_any: [String!]
  name_not_false: String
  name_not_i_cont: String
  name_not_i_cont_all: [String!]
  name_not_i_cont_any: [String!]
  name_not_in: [String!]
  name_not_in_all: [String!]
  name_not_in_any: [String!]
  name_not_null: String
  name_not_start: String
  name_not_start_all: [String!]
  name_not_start_any: [String!]
  name_not_true: String
  name_null: String
  name_present: String
  name_start: String
  name_start_all: [String!]
  name_start_any: [String!]
  name_true: String
  puid_blank: String
  puid_cont: String
  puid_cont_all: [String!]
  puid_cont_any: [String!]
  puid_does_not_match: String
  puid_does_not_match_all: [String!]
  puid_does_not_match_any: [String!]
  puid_end: String
  puid_end_all: [String!]
  puid_end_any: [String!]
  puid_eq: String
  puid_eq_all: [String!]
  puid_eq_any: [String!]
  puid_false: String
  puid_gt: String
  puid_gt_all: [String!]
  puid_gt_any: [String!]
  puid_gteq: String
  puid_gteq_all: [String!]
  puid_gteq_any: [String!]
  puid_i_cont: String
  puid_i_cont_all: [String!]
  puid_i_cont_any: [String!]
  puid_in: [String!]
  puid_in_all: [String!]
  puid_in_any: [String!]
  puid_lt: String
  puid_lt_all: [String!]
  puid_lt_any: [String!]
  puid_lteq: String
  puid_lteq_all: [String!]
  puid_lteq_any: [String!]
  puid_matches: String
  puid_matches_all: [String!]
  puid_matches_any: [String!]
  puid_not_cont: String
  puid_not_cont_all: [String!]
  puid_not_cont_any: [String!]
  puid_not_end: String
  puid_not_end_all: [String!]
  puid_not_end_any: [String!]
  puid_not_eq: String
  puid_not_eq_all: [String!]
  puid_not_eq_any: [String!]
  puid_not_false: String
  puid_not_i_cont: String
  puid_not_i_cont_all: [String!]
  puid_not_i_cont_any: [String!]
  puid_not_in: [String!]
  puid_not_in_all: [String!]
  puid_not_in_any: [String!]
  puid_not_null: String
  puid_not_start: String
  puid_not_start_all: [String!]
  puid_not_start_any: [String!]
  puid_not_true: String
  puid_null: String
  puid_present: String
  puid_start: String
  puid_start_all: [String!]
  puid_start_any: [String!]
  puid_true: String
  updated_at_blank: String
  updated_at_cont: String
  updated_at_cont_all: [String!]
  updated_at_cont_any: [String!]
  updated_at_does_not_match: String
  updated_at_does_not_match_all: [String!]
  updated_at_does_not_match_any: [String!]
  updated_at_end: String
  updated_at_end_all: [String!]
  updated_at_end_any: [String!]
  updated_at_eq: String
  updated_at_eq_all: [String!]
  updated_at_eq_any: [String!]
  updated_at_false: String
  updated_at_gt: String
  updated_at_gt_all: [String!]
  updated_at_gt_any: [String!]
  updated_at_gteq: String
  updated_at_gteq_all: [String!]
  updated_at_gteq_any: [String!]
  updated_at_i_cont: String
  updated_at_i_cont_all: [String!]
  updated_at_i_cont_any: [String!]
  updated_at_in: [String!]
  updated_at_in_all: [String!]
  updated_at_in_any: [String!]
  updated_at_lt: String
  updated_at_lt_all: [String!]
  updated_at_lt_any: [String!]
  updated_at_lteq: String
  updated_at_lteq_all: [String!]
  updated_at_lteq_any: [String!]
  updated_at_matches: String
  updated_at_matches_all: [String!]
  updated_at_matches_any: [String!]
  updated_at_not_cont: String
  updated_at_not_cont_all: [String!]
  updated_at_not_cont_any: [String!]
  updated_at_not_end: String
  updated_at_not_end_all: [String!]
  updated_at_not_end_any: [String!]
  updated_at_not_eq: String
  updated_at_not_eq_all: [String!]
  updated_at_not_eq_any: [String!]
  updated_at_not_false: String
  updated_at_not_i_cont: String
  updated_at_not_i_cont_all: [String!]
  updated_at_not_i_cont_any: [String!]
  updated_at_not_in: [String!]
  updated_at_not_in_all: [String!]
  updated_at_not_in_any: [String!]
  updated_at_not_null: String
  updated_at_not_start: String
  updated_at_not_start_all: [String!]
  updated_at_not_start_any: [String!]
  updated_at_not_true: String
  updated_at_null: String
  updated_at_present: String
  updated_at_start: String
  updated_at_start_all: [String!]
  updated_at_start_any: [String!]
  updated_at_true: String
}

"""
Specify a sort for the samples
"""
input SampleOrder {
  direction: OrderDirection
  field: SampleOrderField!
}

"""
Field to sort the samples by
"""
enum SampleOrderField {
  created_at
  name
  updated_at
}

"""
Autogenerated input type of TransferSamples
"""
input TransferSamplesInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The Node ID of the project to transfer to. For example, `gid://irida/Project/a84cd757-dedb-4c64-8b01-097020163077`.
  """
  newProjectId: ID

  """
  Persistent Unique Identifier of the project to transfer to. For example, `INXT_PRJ_AAAAAAAAAA`.
  """
  newProjectPuid: ID

  """
  The Node ID of the project to transfer to. For example, `gid://irida/Project/a84cd757-dedb-4c64-8b01-097020163077`.
  """
  projectId: ID

  """
  Persistent Unique Identifier of the project to transfer to. For example, `INXT_PRJ_AAAAAAAAAA`.
  """
  projectPuid: ID

  """
  List of samples to transfer.
  """
  sampleIds: [ID!]!
}

"""
Autogenerated return type of TransferSamples.
"""
type TransferSamplesPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  A list of errors that prevented the mutation.
  """
  errors: [UserError!]!

  """
  List of transfered sample ids.
  """
  samples: [ID!]
}

"""
Autogenerated input type of UpdateSampleMetadata
"""
input UpdateSampleMetadataInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The metadata to update the sample with.
  """
  metadata: JSON!

  """
  The Node ID of the sample to be updated. For example, `gid://irida/Sample/a84cd757-dedb-4c64-8b01-097020163077`
  """
  sampleId: ID

  """
  Persistent Unique Identifier of the sample. For example, `INXT_SAM_AAAAAAAAAA`.
  """
  samplePuid: ID
}

"""
Autogenerated return type of UpdateSampleMetadata.
"""
type UpdateSampleMetadataPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  A list of errors that prevented the mutation.
  """
  errors: [UserError!]

  """
  The updated sample.
  """
  sample: Sample

  """
  The status of the mutation.
  """
  status: JSON
}

"""
A user
"""
type User implements Node {
  """
  Datetime of creation.
  """
  createdAt: ISO8601DateTime!

  """
  User email.
  """
  email: String!

  """
  ID of the user.
  """
  id: ID!

  """
  Datetime of last update.
  """
  updatedAt: ISO8601DateTime!
}

"""
A user-readable error
"""
type UserError {
  """
  A description of the error
  """
  message: String!

  """
  Which input value this error came from
  """
  path: [String!]
}
